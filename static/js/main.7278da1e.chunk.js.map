{"version":3,"sources":["Util.js","Sender.js","Loader/index.js","Receiver.js","App.js","reportWebVitals.js","index.js"],"names":["_createMessage","text","id","uuidv4","creationTime","Date","receivedTime","addMessage","setLastId","setIsLastMessageRead","message","_waitingPromises","length","shift","resolve","_messages","push","getNextMessage","a","Promise","reject","this","mid","filter","e","Sender","useState","setText","lastMessageId","setLastMessageId","isLastMessageRead","className","for","placeholder","type","name","value","onChange","target","disabled","onClick","Util","deleteMessage","Loader","class","Message","style","fontSize","toString","readonly","Receiver","setMessage","isWaiting","setIsWaiting","onNext","alert","msg","App","maxWidth","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7278da1e.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\nexport class Util {\n  constructor() {\n    this._messages = [];\n    this._waitingPromises = [];\n  }\n\n  _createMessage = (text) => {\n    return {\n      id: uuidv4(),\n      text,\n      creationTime: new Date(),\n      receivedTime: null,\n    };\n  };\n\n  addMessage = (text, setLastId, setIsLastMessageRead) => {\n    const message = this._createMessage(text);\n\n    if (this._waitingPromises.length > 0) {\n      const promise = this._waitingPromises.shift();\n      promise.resolve({ message, setIsLastMessageRead });\n    } else {\n      this._messages.push({ message, setIsLastMessageRead });\n    }\n    setLastId(message.id);\n  };\n\n  getNextMessage = async () => {\n    if (this._messages.length === 0)\n      return new Promise((resolve, reject) => {\n        this._waitingPromises.push({ resolve, reject });\n      });\n\n    const { message, setIsLastMessageRead } = this._messages.shift();\n    // make clear that we return 2 things\n    return { message, setIsLastMessageRead };\n  };\n\n  deleteMessage(mid) {\n    this._messages = this._messages.filter(\n      (e) => e.message.id !== mid || e.setIsLastMessageRead(true) // short circuit: setIsLastMessageRead will be invoked only when e.id===mid\n    );\n  }\n}\n\nexport default new Util();\n","import { useState } from \"react\";\nimport Util from \"./Util\";\n\nconst Sender = () => {\n  const [text, setText] = useState(\"\");\n  const [lastMessageId, setLastMessageId] = useState(null);\n  /* Init with true. Asume all messages never written were read */\n  const [isLastMessageRead, setIsLastMessageRead] = useState(true);\n\n  return (\n    <div className=\"sender\">\n      <h1>Welcome</h1>\n      <label for=\"message\">let's send a message</label>\n      <textarea\n        placeholder=\"your message\"\n        type=\"text\"\n        id=\"message\"\n        name=\"message\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button\n        disabled={!text}\n        type=\"submit\"\n        value=\"Submit\"\n        onClick={() => {\n          Util.addMessage(text, setLastMessageId, setIsLastMessageRead);\n\n          // prepare for next message to be written\n          setIsLastMessageRead(false);\n          setText(\"\");\n        }}\n      >\n        Submit\n      </button>\n      {!isLastMessageRead && (\n        <button onClick={() => Util.deleteMessage(lastMessageId)}>\n          Delete last message: {lastMessageId}\n        </button>\n      )}\n    </div>\n  );\n};\nexport default Sender;\n","import \"./Loader.css\";\n\nconst Loader = () => (\n  <div class=\"lds-ripple\">\n    <div></div>\n    <div></div>\n  </div>\n);\n\nexport default Loader;\n","import { useState } from \"react\";\nimport Util from \"./Util\";\nimport Loader from \"./Loader\";\n\nconst Message = ({ creationTime, text, id }) => {\n  if (!creationTime) return null;\n  return (\n    <div>\n      <div style={{ fontSize: \"0.5rem\" }}>\n        creation time:\n        {creationTime.toString()}\n      </div>\n      <div style={{ fontSize: \"0.5rem\" }}>\n        received time time:\n        {new Date().toString()}\n      </div>\n      <div>Message:</div>\n      <textarea readonly value={text} />\n    </div>\n  );\n};\nconst Receiver = () => {\n  const [message, setMessage] = useState(\"\");\n  const [isWaiting, setIsWaiting] = useState(false);\n\n  const onNext = async () => {\n    if (isWaiting) {\n      return alert(\"You've already pressed Next. Please wait\");\n    }\n    setIsWaiting(true);\n    setMessage(\"\");\n    const { message: msg, setIsLastMessageRead } = await Util.getNextMessage();\n    setMessage(msg);\n    setIsLastMessageRead(true);\n    setIsWaiting(false);\n  };\n\n  return (\n    <div className=\"receiver\">\n      <div>Press Next to start receiving messages</div>\n      <button onClick={onNext}>Next</button>\n      {isWaiting ? <Loader /> : <Message {...message} />}\n    </div>\n  );\n};\nexport default Receiver;\n","import \"./App.css\";\nimport Sender from \"./Sender\";\nimport Receiver from \"./Receiver\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Sender />\n        <div style={{ maxWidth: \"90%\", display: \"flex\" }}>\n          <Receiver />\n          <Receiver />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}